// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using travelAgency;

#nullable disable

namespace travelAgency.Migrations
{
    [DbContext(typeof(TravelAgencyContext))]
    partial class TravelAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("travelAgency.model.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("amenity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StayId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("travelAgency.model.Arrangement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("numberOfPearsons")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Arrangements");
                });

            modelBuilder.Entity("travelAgency.model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImgLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("travelAgency.model.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lng")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Place");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("travelAgency.model.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("travelAgency.model.TripSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TripId");

                    b.ToTable("TripSchedules");
                });

            modelBuilder.Entity("travelAgency.model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Auth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("travelAgency.model.Attraction", b =>
                {
                    b.HasBaseType("travelAgency.model.Place");

                    b.HasDiscriminator().HasValue("Attraction");
                });

            modelBuilder.Entity("travelAgency.model.Restaurant", b =>
                {
                    b.HasBaseType("travelAgency.model.Place");

                    b.HasDiscriminator().HasValue("Restaurant");
                });

            modelBuilder.Entity("travelAgency.model.Stay", b =>
                {
                    b.HasBaseType("travelAgency.model.Place");

                    b.HasDiscriminator().HasValue("Stay");
                });

            modelBuilder.Entity("travelAgency.model.Amenity", b =>
                {
                    b.HasOne("travelAgency.model.Stay", null)
                        .WithMany("StayAmenities")
                        .HasForeignKey("StayId");
                });

            modelBuilder.Entity("travelAgency.model.Arrangement", b =>
                {
                    b.HasOne("travelAgency.model.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("travelAgency.model.User", "User")
                        .WithMany("Arrangements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("travelAgency.model.Image", b =>
                {
                    b.HasOne("travelAgency.model.Place", null)
                        .WithMany("images")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("travelAgency.model.TripSchedule", b =>
                {
                    b.HasOne("travelAgency.model.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("travelAgency.model.Trip", "Trip")
                        .WithMany("Schedules")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("travelAgency.model.Place", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("travelAgency.model.Trip", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("travelAgency.model.User", b =>
                {
                    b.Navigation("Arrangements");
                });

            modelBuilder.Entity("travelAgency.model.Stay", b =>
                {
                    b.Navigation("StayAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
